{
 "Resources": {
  "CfnLexGenAIDemoRole8075A559": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lexv2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AWSLambdaExecute"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/CfnLexGenAIDemoRole/Resource"
   }
  },
  "CfnLambdaGenAIDemoRoleE89AA239": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSageMakerFullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonS3FullAccess"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/CfnLambdaGenAIDemoRole/Resource"
   }
  },
  "SourceMatBucketIDCFNDD0E86F6": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "lexgenaistack-source-materials-bucket-",
       {
        "Ref": "AWS::AccountId"
       }
      ]
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/SourceMatBucketID-CFN/Resource"
   }
  },
  "SourceMatBucketIDCFNPolicy8F4E689A": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "SourceMatBucketIDCFNDD0E86F6"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "SourceMatBucketIDCFNDD0E86F6",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SourceMatBucketIDCFNDD0E86F6",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/SourceMatBucketID-CFN/Policy/Resource"
   }
  },
  "SourceMatBucketIDCFNNotificationsCC77286F": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "SourceMatBucketIDCFNDD0E86F6"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "readsourceandbuildindexfunctionCFN70BC15A3",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "SourceMatBucketIDCFNAllowBucketNotificationsToLexGenAIDemoFilesStackreadsourceandbuildindexfunctionCFNCA6264E7B0023BDB"
   ],
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/SourceMatBucketID-CFN/Notifications/Resource"
   }
  },
  "SourceMatBucketIDCFNAllowBucketNotificationsToLexGenAIDemoFilesStackreadsourceandbuildindexfunctionCFNCA6264E7B0023BDB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "readsourceandbuildindexfunctionCFN70BC15A3",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "SourceMatBucketIDCFNDD0E86F6",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/SourceMatBucketID-CFN/AllowBucketNotificationsToLexGenAIDemoFilesStackreadsourceandbuildindexfunctionCFNCA6264E7"
   }
  },
  "IndexBucketCFND5625BE5": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "lexgenaistack-created-index-bucket-",
       {
        "Ref": "AWS::AccountId"
       }
      ]
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/IndexBucket-CFN/Resource"
   }
  },
  "IndexBucketCFNPolicyDEBE1C68": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "IndexBucketCFND5625BE5"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "IndexBucketCFND5625BE5",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "IndexBucketCFND5625BE5",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/IndexBucket-CFN/Policy/Resource"
   }
  },
  "readsourceandbuildindexfunctionCFN70BC15A3": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:80c1306d31c2f8e744f025573d3bbfc5d7525791e3269094e9a3bf539cd1d13b"
     }
    },
    "FunctionName": "read-source-and-build-index-fn",
    "MemorySize": 10240,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "CfnLambdaGenAIDemoRoleE89AA239",
      "Arn"
     ]
    },
    "Timeout": 300
   },
   "DependsOn": [
    "CfnLambdaGenAIDemoRoleE89AA239"
   ],
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/read-source-and-build-index-function-CFN/Resource",
    "aws:asset:path": "asset.80c1306d31c2f8e744f025573d3bbfc5d7525791e3269094e9a3bf539cd1d13b",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CFNruntimefnA69E19BE": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:8476acfeaf4dd452b68a1225abece56f012510ba40f2b86c20f1e9b818371ce2"
     }
    },
    "FunctionName": "lex-codehook-fn",
    "MemorySize": 10240,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "CfnLambdaGenAIDemoRoleE89AA239",
      "Arn"
     ]
    },
    "Timeout": 300
   },
   "DependsOn": [
    "CfnLambdaGenAIDemoRoleE89AA239"
   ],
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/CFN-runtime-fn/Resource",
    "aws:asset:path": "asset.8476acfeaf4dd452b68a1225abece56f012510ba40f2b86c20f1e9b818371ce2",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "CFNruntimefnInvokeSvFxGy7DX2gxObGGHkXUOYXcVuKE47n240yswOZ4O3Y43EC5113": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CFNruntimefnA69E19BE",
      "Arn"
     ]
    },
    "Principal": "lexv2.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/CFN-runtime-fn/InvokeSvFxGy7DX2gxObGGHkXUOYXcVuKE47n240yswOZ4O3Y="
   }
  },
  "LexGenAIDemoCfnBot": {
   "Type": "AWS::Lex::Bot",
   "Properties": {
    "AutoBuildBotLocales": true,
    "BotLocales": [
     {
      "Intents": [
       {
        "InitialResponseSetting": {
         "CodeHook": {
          "EnableCodeHookInvocation": true,
          "IsActive": true,
          "PostCodeHookSpecification": {}
         }
        },
        "Name": "placeHolderIntent",
        "SampleUtterances": [
         {
          "Utterance": "utterance"
         }
        ]
       },
       {
        "FulfillmentCodeHook": {
         "Enabled": true,
         "IsActive": true,
         "PostFulfillmentStatusSpecification": {}
        },
        "InitialResponseSetting": {
         "CodeHook": {
          "EnableCodeHookInvocation": true,
          "IsActive": true,
          "PostCodeHookSpecification": {}
         }
        },
        "Name": "FallbackIntent",
        "ParentIntentSignature": "AMAZON.FallbackIntent"
       }
      ],
      "LocaleId": "en_US",
      "NluConfidenceThreshold": 0.4
     }
    ],
    "DataPrivacy": {
     "ChildDirected": "false"
    },
    "Description": "Bot created for blog post: Enhance Amazon Lex with conversational FAQ features using LLMs",
    "IdleSessionTTLInSeconds": 300,
    "Name": "LexGenAIDemoBotCfn",
    "RoleArn": {
     "Fn::GetAtt": [
      "CfnLexGenAIDemoRole8075A559",
      "Arn"
     ]
    },
    "TestBotAliasSettings": {
     "BotAliasLocaleSettings": [
      {
       "BotAliasLocaleSetting": {
        "CodeHookSpecification": {
         "LambdaCodeHook": {
          "CodeHookInterfaceVersion": "1.0",
          "LambdaArn": {
           "Fn::GetAtt": [
            "CFNruntimefnA69E19BE",
            "Arn"
           ]
          }
         }
        },
        "Enabled": true
       },
       "LocaleId": "en_US"
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/LexGenAIDemoCfnBot"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/01P227CMAz9Ft5TQ+kXANOkvaHuA1BITec1iVGcalRR/52GgMbTufjY1tlCvWlgs9J/UpluqCydIX1HbQa1WKdE2kFq2aI6XPwDj2zJTFkWNitpIO1HM2DM7pMV+A+/61lZ7c6dhpSvYHAkQuzVBy+Z8OV0j5+jNzF7S+LFZ4UmnLQIRoG37C47eQYtXlkocpj2WlBZvEF+zXFWLQqPwZQeL/7YXNr25Ps8OLDvqLw6TvGH/bqBuobt6leIqjD6SA6hLXgHzJ1cbTsBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "LexGenAIDemoFilesStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}